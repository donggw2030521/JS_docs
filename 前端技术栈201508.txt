说明：针对ES5以及以下，用ES6，和还未规范标准化的ES7之后很多现在的实现都会out
A类需求：pc端（特效较多，单向交互多），门户，移动端H5活动页面
B类需求：单页应用[PC,移动端]，PC端后台管理系统等双向交互较多的系统【类似于前述的双向交互较多的需求】
C类需求：移动端，微信平台H5游戏。【纯前端工作】
D类需求：Hybrid应用开发，纯H5的App应用【单向交互较多的需求多】
* 表示优先级

备注：门户类等各种与数据交互性稍多的控件也都可以使用angular或者react，vue等来实现

=========================目前情况=====================
1.当前pc端开发
        当前pc段开发都是针对于不同项目自己写组件和页面。没用到任何框架，暂时没用的必要。如要使用的话做类似于门户的网站，只建议使用bootstrap框架即可。
        活动页，用前端统一的控件与css做开发

2.当前移动端开发
        移动端应用，有用到部分UI框架，比如amazeUI，framework7。需要解决的是各种移动端对应的css的坑。

        移动端小游戏，当前都是操作dom，还是使用传统开发来做这种项目。若要发展和做的更好，必须搞canvas，这个要看需求情况和小游戏的复杂度。

3.网上js库和jquery插件
          必需会用库jquery,zepto,underscore。【*****】
          建议php都把jquery API熟悉了，因为需要后台的地方，主流的还是jquery和原生js，为了方便还是用jquery较多，所以各种常见插件的api和jquery的API等细节都要关注。
          需要特别了解的是了解js事件流【dom事件的注册与dom事件的委托】

4.开发方式
          【A】类需求开发，暂时不用框架，大多使用插件即可，但是要用构建工具来构建打包。
          【B】类需求需用js框架，保持数据的统一控制
          【C】类需求可能用到常用的小游戏框架开发，封装来canvas的js插件
          【D】类webview，hybird类的开发可以用网上的移动开发框架，framework，amaze等
		  
5.针对ie8对canvas和css3和H5的兼容性解决方案
		Modernizr.js 为HTML5和CSS3而生,权威的解决方案[解决各种跨浏览器兼容性问题]
		https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills
		http://modernizr.com/
		html5shiv  https://github.com/aFarkas/html5shiv

		polyfills 要ie8支持h5和canvas的方案,html5.js
		http://www.ziliao1.com/Article/Show/7816A4595D1388E61F9BDF43581DD211.html
		
		https://github.com/arv/ExplorerCanvas
		https://github.com/es-shims/es5-shim

=========================未来要做的=========================
1.SPA技术选型
        【B类需求】
        基于MV*框架angular（适用于数据原型处理复杂的）, react(数据原型简单)等
         mobile-angular-ui https://github.com/mcasimir/mobile-angular-ui
        这两个是目前流行的js mvc（MVVM）框架，有数据绑定，依赖注入等特性，路由控制交由前端,还有vue.js,backbone和ember.js 等MVC框架
		【D类需求】
		使用 sencha Touch,appjs等js框架，amazeUI semanticUI等
		jQueryMobile不推荐了，据说坑多，data-定义属性不好控制
		
		推荐：ionic（angular）  frameWork UI（jquery） 

        node开发
        node无视连接数量，适应于高并发项目，前后段都用js开发，数据层使用mongoDB，适用于微信上的那种可能面临高并发，数据库设计不是很严格的活动类项目。
        对于即时类应用也可以用node开发.一般是小项目或者大项目的小模块

2.前端工程化【ABCD类都需要】
		前端集成解决方案 文档https://github.com/fouber/blog
		
        ①打包构建：grunt/gulp+bower/webpack 自动化工具构建【压缩合并重命名】前端js/css，图片等资源优化等【*****】
        ②模块化：模块化开发(require.js_amd和seajs_cmd的选型)【****】http://www.zhihu.com/question/20342350 选型上选择异步加载思想的requireJS
        新的systemJS https://github.com/systemjs/systemjs
        选择的理由：思想上，文档，打包用
		r.js
		
        requireJS eg:
        use:
        require.config({});
        require([],function(){});
        define:
        define(id?,dep?,function(){
        return or not.
        });

        模块化引入与压缩合并js文件上的选择，压缩，只压缩合并小的文件的通用方法，合并成一个，然后通过模块化引入。即减少了http部分请求，又易于维护。
		
		browserify   https://github.com/substack/node-browserify   (browser-side require() the node.js way)
		
		④bower，类似于maven中央库的感觉，统一管理引入库的下载和引用,管理项目的依赖
		

        ③前端模板的应用(artTemplete,doT,mustache,handlebars;ejs,jade,juicer,baiduTemplete,kissyTemplete等等)
            artTemplate: 体积较小，在所有环境下性能高，语法灵活。
            dot.js: 体积小，在现代浏览器下性能高，语法灵活。
            etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。
            handlebars: 体积大，在所有环境下性能高，扩展性高。
            hogon: 体积小，在现代浏览器下性能高。
            nunjucks: 体积较大，性能一般，模板复用性高。
        遵循MVC模式开发编写前端模块[可以自己遵循模式开发，也可用上面说的的js框架]【***】【B类需求】
        需要给前端自己一个服务器，和建立公司自己的一个CDN，存放js文件和其他静态资源css文件。前端项目完成后，部署到服务器，后端引入各种资源文件或者作开发，直接从前端部署过的项目上拷贝源码。【****】


3.是否需要使用前端模板,做前后端分离的问题
        针对【A】【D】类需求，没必要前后端分离
        没有实现前后端分离的开发，没必要使用前端模板，展示层的东西依然用后端的模板或动态页面。
        针对于【B】类需求，可以做前后端分离。
        若前后端分离，可使用restful的风格开发，页面呈现都交给前端，后端只提供数据获取数据的的url，这种方式页面会全部使用ajax了。

4.针对HTML5的新特性在什么项目下使用
         文件操作
         webwork
         地理位置
		 
		 FileAPI 和xhr l2
		 https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#the-formdata-interface

        【特定应用，推送，实时应用】
        websocket

        【C】类需求是小游戏开发范畴，可纯js进行dom开发，可用canvas开发【 网上canvas小游戏开发框架很多】
        SVG
        canvas
        WebGL
        本地存储(onStorage事件)
5.phoneGap开发
	看重性能且功能少的话不要用框架或jQuery，最好cordova.js都不要加 (试过很多次，不加cordova.js和加cordova.js的性能是两个量级)。
		ionic如果实在是喜欢他的样式或angular的话也可以用。虽然肯定比不用框架慢，但是ionic相对于纯cordova优势还是挺多的，有更多的功能，有社区，有文档，有好看的官网，开发的也挺活跃。
		如果实在是觉得没有框架难受的话，可以试下Vue, Avalon这类稍微轻量点的MVVM框架，简单粗暴，而且对性能几乎没有影响。
	熟悉AngularJS用 ionic ，熟悉jQuery用 framework7。不管用 jQuery 还是 ionic 。在注意代码质量的前提下，在 iOS 系统上都没有明显的卡顿现象。Android 上可以尽量减少动画效果，并且集成 crosswalk 来提升效果和性能。

6.框架和接口编程,异步编程promise,deferred
	AOP编程 meldjs  https://github.com/cujojs/meld
	异步编程 q.js等
	-----------------
	研究gulp.js的源码深入了解异步
	
7.前端开发
	面向组件化开发
	
8.开源md博客系统
	hugo   https://github.com/spf13/hugo
	gitblog  https://github.com/jockchou/gitblog【国产】
	gitbook  https://www.gitbook.com/
	
9.babel  https://github.com/babel/babel
		js的转换编译器(用es6和es7编写代码，引入babel来转换成es5来执行)
		
	
	lodashJS.imutableJS,underscore的使用，
	

	








