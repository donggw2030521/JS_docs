风格由IDE来统一
    IDE的环境和文件的编码统一使用UTF-8
=============================
重点在编程细节上：

命名，变量，函数

    变量的上下文没有块级作用域，只有函数作用域。
    不用可以把变量声明放在当前作用域(函数)顶部，在哪里用，在哪声明。
    js函数允许对同一变量多次声明，变量声明会提升，赋值不会提升，原var出现的位置就是赋值的位置。

return影响的函数或变量声明提前

for循环,退出循环(continue;break)
    退出单个迭代用continue；退出整个循环用break

异常处理
    业务逻辑稍多的时候，就需要自己根据需求抛出各种错误(js没有exception，只能throw new Error()或者throw errorMsg(string))
    try{}catch(){}finally{}


requirejs或seaJs的使用
    异步模块定义 所有依赖全部拉取之后（依赖前置），才能使用
    定义
        define(id?,dep?,function(){
            //dep为定义此模块的时候，此模块的依赖。模块中的方法需要依赖全部拉取完才能执行
            return XXX//只有return出来（闭包），才能取到这个模块，执行模块中的方法，否则加载好之后的模块中的api都是全局的，
        });
    使用 依赖按需加载 (依赖就近)
        require.config({});
        require([],function(){});

    通用模块定义 需要哪个依赖,加载完成之后就执行这个模块
    定义
        define(function(require, exports, module){
            var a = require('./a');
            a.methodA();
            //拉取依赖模块之后就回立即执行，不会像AMD一样全拉取完才执行
            var b = require('./b');
             b.methodB();
            });
    使用
        seaJS.use();

模板使用

图片多，用懒加载方式
    <script>
        var obj = new Image();
        obj.onload = function()
        {
            $("img").attr('src',this.src);
             alert(this.src);
        }
        obj.src = "http://XXX.jpg";
    </script>
    <div id="mypic"><img src="../images/loading.gif" /></div>


dom on ready与window.onload事件的使用
    domReady表示document加载好之后就执行
    页面有图片的操作，比如读取img的height或者width等需求时，使用window.onload，表示dom加载完成，资源也下载完成时候执行

ajax全部使用延迟对象deferred对象
    使用前$.ajaxSetup({/*定义通用的属性,比如beforeSend，complete*/});
    var jqXhr=$.ajax();
    jqXhr.done(function(data){}).fail(function(){});


高级方法：
基于数据驱动的应用开发，先定义数据模型，定义getter，setter方法等
GC
闭包回调等高阶函数的使用
函数柯里化定义service API

jq插件的写法：
    数据model，配置setting，状态变量stateData
    destroy方法，init方法，update方法
    插件事件使用命名空间，事件全部放在第一次加载插件的判断中




